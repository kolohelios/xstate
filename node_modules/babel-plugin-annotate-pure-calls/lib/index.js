"use strict";

exports.__esModule = true;
exports.default = void 0;
var PURE_ANNOTATION = '#__PURE__';

var isPureAnnotated = function isPureAnnotated(node) {
  var leadingComments = node.leadingComments;

  if (!leadingComments) {
    return false;
  }

  return leadingComments.some(function (comment) {
    return /[@#]__PURE__/.test(comment.value);
  });
};

var annotateAsPure = function annotateAsPure(path) {
  if (isPureAnnotated(path.node)) {
    return;
  }

  path.addComment('leading', PURE_ANNOTATION);
};

var hasCallableParent = function hasCallableParent(_ref) {
  var parentPath = _ref.parentPath;
  return parentPath.isCallExpression() || parentPath.isNewExpression();
};

var isUsedAsCallee = function isUsedAsCallee(path) {
  if (!hasCallableParent(path)) {
    return false;
  }

  return path.parentPath.get('callee') === path;
};

var isInCallee = function isInCallee(path) {
  do {
    path = path.parentPath;

    if (isUsedAsCallee(path)) {
      return true;
    }
  } while (!path.isStatement() && !path.isFunction());

  return false;
};

var isExecutedDuringInitialization = function isExecutedDuringInitialization(path) {
  var functionParent = path.getFunctionParent();

  while (functionParent) {
    // babel@6 returns "incorrectly" program as function parent
    if (functionParent.isProgram()) {
      return true;
    }

    if (!isUsedAsCallee(functionParent)) {
      return false;
    }

    functionParent = functionParent.getFunctionParent();
  }

  return true;
};

var isInAssignmentContext = function isInAssignmentContext(path) {
  var statement = path.getStatementParent();
  var parentPath;

  do {
    ;

    var _ref2 = parentPath || path;

    parentPath = _ref2.parentPath;

    if (parentPath.isVariableDeclaration() || parentPath.isAssignmentExpression()) {
      return true;
    }
  } while (parentPath !== statement);

  return false;
};

var callableExpressionVisitor = function callableExpressionVisitor(path) {
  if (isUsedAsCallee(path) || isInCallee(path)) {
    return;
  }

  if (!isExecutedDuringInitialization(path)) {
    return;
  }

  if (!isInAssignmentContext(path) && !path.getStatementParent().isExportDefaultDeclaration()) {
    return;
  }

  annotateAsPure(path);
};

var _default = function _default() {
  return {
    name: 'annotate-pure-calls',
    visitor: {
      'CallExpression|NewExpression': callableExpressionVisitor
    }
  };
};

exports.default = _default;